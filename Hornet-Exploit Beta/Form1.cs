using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;
using System.Speech.Recognition;
using System.Windows;
using System.Diagnostics;
using System.IO;

namespace Hornet_Exploit_Beta
{
    public partial class Form1 : Form
    {
        public Form1()
        {
            InitializeComponent();
            timer1.Start();
        }

        private void label4_Click(object sender, EventArgs e)
        {
            Environment.Exit(0);
        }

        private void RunConsole(string debug)
        {
            richTextBox2.AppendText("\n [ Console ] - " + debug);
        }
        SpeechRecognitionEngine speechRecognitionEngine = null;
        List<Word> words = new List<Word>();

        private void checkBox1_CheckedChanged(object sender, EventArgs e)
        {
            if (checkBox1.Checked == true)
            {
                RunConsole("Activating Voice Command");
                try
                {
                    speechRecognitionEngine = createSpeechEngine("de-DE");
                    speechRecognitionEngine.AudioLevelUpdated += new EventHandler<AudioLevelUpdatedEventArgs>(engine_AudioLevelUpdated);
                    speechRecognitionEngine.SpeechRecognized += new EventHandler<SpeechRecognizedEventArgs>(engine_SpeechRecognized);
                    loadGrammarAndCommands();
                    speechRecognitionEngine.SetInputToDefaultAudioDevice();
                    speechRecognitionEngine.RecognizeAsync(RecognizeMode.Multiple);
                }
                catch (Exception ex)
                {
                    RunConsole("Activating Voice Command Failed to Respond");
                }
            }
            else
            {
                speechRecognitionEngine.RecognizeAsyncStop();
                speechRecognitionEngine.Dispose();
                RunConsole("Deactivating Voice Command");
            }
        }

        void engine_AudioLevelUpdated(object sender, AudioLevelUpdatedEventArgs e)
        {
            progressBar1.Value = e.AudioLevel;
        }

        void engine_SpeechRecognized(object sender, SpeechRecognizedEventArgs e)
        {
            richTextBox2.Text += "\r" + getKnownTextOrExecute(e.Result.Text) + "\n";
        }

        private void CommandRecognition(string commands) //Heres ur fucking commands executed
        {
            if (commands == "injectexploit")
            {
                MessageBox.Show("Attaching Exploit");
            }
            else if (commands == "executeexecutor")
            {
                MessageBox.Show("Attaching Exploit");
            }
            else if (commands == "easyexploit")
            {
                Properties.Settings.Default.CurrentAPI = "EasyExploit";
                Properties.Settings.Default.Save();
            }
            else if (commands == "wearedevs")
            {
                Properties.Settings.Default.CurrentAPI = "WeAreDevs";
                Properties.Settings.Default.Save();
            }
            else if (commands == "panda")
            {
                Properties.Settings.Default.CurrentAPI = "Panda Bytecode";
                Properties.Settings.Default.Save();
            }
            else if (commands == "executebasic")
            {
                MessageBox.Show("So yeah it execute print lmao on roblox");
            }
        }
        private string getKnownTextOrExecute(string command)
        {
            try
            {
                var cmd = words.Where(c => c.Text == command).First();

                if (cmd.IsShellCommand)
                {
                    string commandforbeez = cmd.AttachedText;
                    CommandRecognition(commandforbeez); //Send the Command to Command Recognition :D

                    return "[ Client ] - Execute Voice Command [ " + cmd.AttachedText + "]";
                }
                else
                {
                    return cmd.AttachedText;
                }
            }
            catch (Exception)
            {
                return command;
            }
        }

        private SpeechRecognitionEngine createSpeechEngine(string preferredCulture)
        {
            foreach (RecognizerInfo config in SpeechRecognitionEngine.InstalledRecognizers())
            {
                if (config.Culture.ToString() == preferredCulture)
                {
                    speechRecognitionEngine = new SpeechRecognitionEngine(config);
                    break;
                }
            }

            // if the desired culture is not found, then load default
            if (speechRecognitionEngine == null)
            {
                RunConsole("The desired culture is not installed on this machine, the speech-engine will continue using " + SpeechRecognitionEngine.InstalledRecognizers()[0].Culture.ToString() + " as the default culture.");
                speechRecognitionEngine = new SpeechRecognitionEngine(SpeechRecognitionEngine.InstalledRecognizers()[0]);
            }

            return speechRecognitionEngine;
        }


        private void loadGrammarAndCommands()
        {
            try
            {
                Choices texts = new Choices();
                string[] lines = File.ReadAllLines(Environment.CurrentDirectory + "\\VoiceCommand.dll");
                foreach (string line in lines)
                {
                    if (line.StartsWith("--") || line == String.Empty) continue;
                    var parts = line.Split(new char[] { '|' });
                    words.Add(new Word() { Text = parts[0], AttachedText = parts[1], IsShellCommand = (parts[2] == "true") });
                    texts.Add(parts[0]);
                }
                Grammar wordsList = new Grammar(new GrammarBuilder(texts));
                speechRecognitionEngine.LoadGrammar(wordsList);
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        private void timer1_Tick(object sender, EventArgs e)
        {
            apiuse.Text = "Current API: " + Properties.Settings.Default.CurrentAPI;
        }
    }
}
